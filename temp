const float diagonal_limit = 0.5f;
float ratio = fabs(y_corr) / fabs(x_corr);
if (ratio > diagnal_limit && ratio < 1.0f / diagonal_limit) {
  return;
} else if (ratio <= diagonal_limit) {
  accumulated_h += x_corr;
} else {
  accumulated_v += y_corr;
}

if (fabs(accumulated_v) >= 1.0f * (clamp_1_100_x (hi_res_interval_v) * 12 / 10)) {
  mouse_report->v = constrain_hid16(mouse_report->v + accumulated_v) / (clamp_1_100_x(hi_res_value_v) * 12 / 10);
  acccumulated_v = 0;)
}

if (fabs(accumulated_h) >= 1.0f * (clamp_1_100_x (hi_res_interval_h) * 12 / 10)) {
  mouse_report->v = constrain_hid16(mouse_report->v + accumulated_h) / (clamp_1_100_x(hi_res_halue_h) * 12 / 10);
  acccumulated_h = 0;)
}
